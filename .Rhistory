library(ade4)
install.packages('ade4')
library(ade4)
data(deug)
head(data)
head(deug)
table(deug$result)
deug.dudi <- dudi.pca(deug$tab, center = deug$cent, scale = FALSE, scan = FALSE)
par(mfrow = c(2,2))
s.class(deug.dudi$li, deug$result, cpoint = 1)
s.class(deug.dudi$li, deug$result, cpoint = 1)
length(deug$result)
?s.class
head(deug.dudi$li)
?dudi.pca
?s.arrow
?s.corcircle
library(boot)
?boot
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
dim(city)
head(city)
w
nuke <- nuclear[, c(1, 2, 5, 7, 8, 10, 11)]
nuke.lm <- glm(log(cost) ~ date+log(cap)+ne+ct+log(cum.n)+pt, data = nuke)
nuke.diag <- glm.diag(nuke.lm)
nuke.diag
nuke.res <- nuke.diag$res * nuke.diag$sd
nuke.res <- nuke.res - mean(nuke.res)
nuke.res
?inv.logit
library(ROCR)
install.packages('ROCR')
library('ROCR')
## -----------------------------------------------------------------------------------
## Demo file for ROCR; start with 'demo(ROCR)'
## -----------------------------------------------------------------------------------
# if(dev.cur() <= 1) get(getOption("device"))()
if(dev.cur() <= 1) dev.new()
opar <- par(ask = interactive() &&
(.Device %in% c("X11", "GTK", "gnome", "windows","quartz")))
data(ROCR.hiv)
pp <- ROCR.hiv$hiv.svm$predictions
ll <- ROCR.hiv$hiv.svm$labels
par(mfrow=c(2,2))
pred<- prediction(pp, ll)
perf <- performance(pred, "tpr", "fpr")
plot(perf, avg= "threshold", colorize=T, lwd= 3,
main= "With ROCR you can produce standard plots like ROC curves ...")
plot(perf, lty=3, col="grey78", add=T)
trainingSim <- twoClassSim(1000)
evalSim     <- twoClassSim(1000)
testingSim  <- twoClassSim(1000)
library(caret)
install.packages('caret')
library(caret)
trainingSim <- twoClassSim(1000)
evalSim     <- twoClassSim(1000)
testingSim  <- twoClassSim(1000)
ctrl <- trainControl(method = "cv",
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(1045)
fdaModel <- train(Class ~ ., data = trainingSim,
method = "fda",
metric = "ROC",
tuneLength = 20,
trControl = ctrl)
trainingSim <- twoClassSim(1000)
evalSim     <- twoClassSim(1000)
testingSim  <- twoClassSim(1000)
ctrl <- trainControl(method = "cv",
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(1045)
fdaModel <- train(Class ~ ., data = trainingSim,
method = "fda",
metric = "ROC",
tuneLength = 20,
trControl = ctrl)
ldaModel <- train(Class ~ ., data = trainingSim,
method = "lda",
metric = "ROC",
trControl = ctrl)
libray(caret)
library(caret)
trainingSim <- twoClassSim(1000)
evalSim     <- twoClassSim(1000)
testingSim  <- twoClassSim(1000)
ctrl <- trainControl(method = "cv",
classProbs = TRUE,
summaryFunction = twoClassSummary)
fdaModel <- train(Class ~ ., data = trainingSim,
method = "fda",
metric = "ROC",
tuneLength = 20,
trControl = ctrl)
data=read.csv('D:/ccj/disease.csv',head=T,row.names=1)
data[1:2,1:2]
head(data)
data[1,]
data[1]
data=read.csv('D:/ccj/disease.csv',head=T,row.names=1,sep='\t')
dim(data)
norm=read.csv('D:/ccj/disease.csv',head=T,row.names=1,sep=',')
norm=read.csv('D:/ccj/normal.csv',head=T,row.names=1,sep=',')
norm=read.csv('D:/ccj/normal.csv',head=T,row.names=1)
norm=read.csv('D:/ccj/normal.csv',head=F)
norm[1,]
norm=read.csv('D:/ccj/normal.csv',head=F,row.names=1)
norm[1,]
head(norm)
dise=read.csv('D:/ccj/disease.csv',head=T,row.names=1,sep='\t')
norm=read.csv('D:/ccj/normal.csv',head=F,row.names=1)
colnames(dise)
norm[1,]
norm=read.csv('D:/ccj/normal.csv',head=T,row.names=1,sep='\t')
colnames(norm)
head(norm)
dise=read.csv('D:/ccj/disease.csv',head=T,row.names=1,sep='\t')
norm=read.csv('D:/ccj/normal.csv',head=T,row.names=1,sep='\t')
data=rbind(t(dise),t(norm))
dise=read.csv('D:/ccj/disease.csv',head=T,row.names=1,sep='\t')
norm=read.csv('D:/ccj/normal.csv',head=T,row.names=1,sep='\t')
dise=t(dise)
norm=t(norm)
data=rbind(dise,norm)
data=data.frame(class=c(rep(1,nrow(dise)),rep(0,norm)))
data=rbind(dise,norm)
data=data.frame(class=c(rep(1,nrow(dise)),rep(0,norm)),
data)
c(rep(1,nrow(dise)),rep(0,norm))
data=data.frame(class=c(rep(1,nrow(dise)),rep(0,nrow(norm))),
data)
head(data)
dim(data)
write.table('123_cjj.txt',col.names=F,row.names=F,quote=F,sep='\t')
write.table(data,'D:/cjj/123_cjj.txt',col.names=F,row.names=F,quote=F,sep='\t')
write.table(data,file='123_cjj.txt',col.names=F,row.names=F,quote=F,sep='\t')
ls
ls()
library(ade4)
data(rhone)
head(rhone)
pca1 <- dudi.pca(rhone$tab, scan = FALSE, nf = 3)
rhone$disch
iv1 <- pcaiv(pca1, rhone$disch, scan = FALSE)
iv1$param
data(rhone)
pca1 <- dudi.pca(rhone$tab, scan = FALSE, nf = 3)
iv1 <- pcaiv(pca1, rhone$disch, scan = FALSE)
iv1$param
# iner inercum inerC inercumC ratio R2    lambda
# 6.27 6.27    5.52  5.52     0.879 0.671 3.7
# 4.14 10.4    4.74  10.3     0.984 0.747 3.54
plot(iv1)
?dudi.pca
ls
ls()
install.packages('wordcloud')
library(wordcloud)
#不同文档wordcloud对比图
sample.tdm <-  TermDocumentMatrix(corpus, control = list(wordLengths = c(2, Inf)))
library(tm)
sample.tdm <-  TermDocumentMatrix(corpus, control = list(wordLengths = c(2, Inf)))
?
TermDocumentMatrix
TermDocumentMatrix
data("crude")
sample.tdm <-  TermDocumentMatrix(crude, control = list(wordLengths = c(2, Inf)))
tdm_matrix <- as.matrix(sample.tdm)
png(paste("sample_comparison",".png", sep = ""), width = 1500, height = 1500 )
comparison.cloud(tdm_matrix)
title(main = "sample comparision")
dev.off()
?comparison.cloud
if(require(tm)){
data(SOTU)
corp <- SOTU
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, tolower)
corp <- tm_map(corp, removeNumbers)
corp <- tm_map(corp, function(x)removeWords(x,stopwords()))
term.matrix <- TermDocumentMatrix(corp)
term.matrix <- as.matrix(term.matrix)
colnames(term.matrix) <- c("SOTU 2010","SOTU 2011")
comparison.cloud(term.matrix,max.words=40,random.order=FALSE)
commonality.cloud(term.matrix,max.words=40,random.order=FALSE)
}
sample.tdm <-  TermDocumentMatrix(crude, control = list(wordLengths = c(2, Inf)))
tdm_matrix <- as.matrix(sample.tdm)
comparison.cloud(tdm_matrix)
png(paste("sample_comparison",".png", sep = ""), width = 1500, height = 1500 )
comparison.cloud(tdm_matrix)
title(main = "sample comparision")
dev.off()
class(tdm_matrix)
head(tdm_matrix)
colnames(tdm_matrix)
tdm_matrix['january',]
tdm_matrix['the',]
tdm_matrix['aggrement',]
tdm_matrix['agreement',]
tdm_matrix['oil',]
tdm_matrix['oil.',]
data(Chem97,package="mlmRev")
install.packages('mlmRev')
data(Chem97,package="mlmRev")
head(Chem97)
histogram(~gcsescore,data=Chem97)
library(lattice)
data(Chem97,package="mlmRev")
head(Chem97)
histogram(~gcsescore,data=Chem97)
histogram(~gcsescore|factor(score),data=Chem97)
densityplot(~gcsescore|factor(score),Chem97,groups=gender,
plot.points=FALSE,auto.key=TRUE)
histogram(~gcsescore|score,data=Chem97)
densityplot(~gcsescore|factor(score),Chem97,groups=gender)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
setwd("~/GitHub/Assignment1")
data=read.csv('./data//activity.csv',head=T)
head(data)
unique(data$)
unique(data$date)
?mapply
word <- function(C, k) paste(rep.int(C, k), collapse = "")
utils::str(mapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE))
(mapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE))
?summary
x=c(NA,1,2)
mean(x)
mean(x,na.rm=T)
?sapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
?hist
hist(islands)
islands
head(data)
?matrix
DF <- data.frame(a = 1:3, b = letters[10:12],
c = seq(as.Date("2004-01-01"), by = "week", len = 3),
stringsAsFactors = TRUE)
data.matrix(DF[1:2])
DF
data.matrix(DF)
a=function(x,data=data){
subdata=subset(data,date==x)
c(mean(subdata$steps,na.rm=T),sum(subdata$steps,na.rm=T))
}
x=data[1,2]
x
a(x)
head(data)
subdata=subset(data,date==x)
c(mean(subdata$steps,na.rm=T),sum(subdata$steps,na.rm=T))
subdata
a
a(x)
x
x1=x
rm(x)
a(x1)
x1
subdata=subset(data,date==x)
subdata=subset(data,date==x1)
a(x1,data=data)
a=function(x,mydata=data){
subdata=subset(mydata,date==x)
c(mean(subdata$steps,na.rm=T),sum(subdata$steps,na.rm=T))
}
a(x1)
na
func_1=function(x,mydata=data,na){
subdata=subset(mydata,date==x)
c(mean(subdata$steps,na.rm=na),sum(subdata$steps,na.rm=na))
}
?sapply
func_1=function(x,mydata=data,na=T){
subdata=subset(mydata,date==x)
c(mean(subdata$steps,na.rm=na),sum(subdata$steps,na.rm=na))
}
x1
func_1(x1)
sapply(unique(data$date),func_1)
dates=unique(data$date)
result=sapply(dates,func_1)
colnames(result)=dates
rownames=c('means','totals')
hist(result['totals',])
result['means',]
head(data)
dates=unique(data$date)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
head(date_m)
head(data_m)
data_m = matrix(NA,dimnames=list(intes,dates))
head(data)
dates=unique(data$date)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'inte']
data_m[intei,datei]=data[i,'steps']
}
data[1:5,1:5]
data_m[1:5,1:5]
data_m[1:5]
data_m[1:5,]
apply(data_m,1,sum)
dates=unique(data$date)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'inte']
data_m[intei,datei]=data[i,'steps']
data[i,'steps']
}
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'inte']
data_m[intei,datei]=data[i,'steps']
print(intei,datei,data[i,'steps'],data_m[intei,datei])
}
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'inte']
data_m[intei,datei]=data[i,'steps']
printc((intei,datei,data[i,'steps'],data_m[intei,datei]))
}
dates=unique(data$date)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'inte']
data_m[intei,datei]=data[i,'steps']
print(c(intei,datei,data[i,'steps'],data_m[intei,datei]))
}
i=100
datei = data[i,'date']
intei = data[i,'inte']
datei
intei
intei = data[i,'interval']
intei
datei = data[i,'date']
intei = paste('i',data[i,'interval'],sep='_')
datei
intei
dates=unique(data$date)
intes=paste('i',unique(data$interval),sep='_')
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = paste('i',data[i,'interval'],sep='_')
data_m[intei,datei]=data[i,'steps']
}
data_m[1:10,1:5]
data[1,3]
class(data[1,3])
dates=unique(data$date)
data$interval=as.character(data$interval)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
intes
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'interval']
data_m[intei,datei]=data[i,'steps']
}
data_m[1:10,1:5]
as.numeric(rownames(data_m))
activity_day = apply(data_m,1,mean,na.rm=T)
activity_day
which.max(activity_day)
```{r,cache=TRUE}
Assignment 1(Reproducible Research)
========================================================
Loading and preprocessing the data
```{r}
data=read.csv('./data//activity.csv',head=T)
dates=unique(data$date)
data$interval=as.character(data$interval)
intes=unique(data$interval)
data_m = matrix(NA,ncol=length(dates),nrow=length(intes),
dimnames=list(intes,dates))
for (i in 1:nrow(data)){
datei = data[i,'date']
intei = data[i,'interval']
data_m[intei,datei]=data[i,'steps']
}
```
What is mean total number of steps taken per day?
```{r}
totals=apply(data_m,2,sum,na.rm=T)
hist(totals,xlab=NULL,main='Histogram of the total number of steps taken each day')
apply(data_m,2,mean,na.rm=T)
```
What is the average daily activity pattern?
```{r}
activity_day = apply(data_m,1,mean,na.rm=T)
plot(as.numeric(rownames(data_m)),activity_day,type='l')
Swhich.max(activity_day)
```
activity_day
result_max=which.max(activity_day)
result_max
activity_day[835]
activity_day['835']
activity_day['104']
activity_day[104]
apply(data_m,1,sum,na.rm=T)
apply(data_m,1,mean,na.rm=T)
rownames(data_m)
i=1
ifelse(is.na(data[i,]),mean(data[i,],na.rm=T),data[i,])
data[i,]
?weekdays
weekdays(data[1,2])
x=colnames(data_m)
x
weekdays(x[1])
weekdays(.leap.seconds)
.leap.seconds
date
?date
as.POSIXct(x[1])
as.POSIXlt(x[1])
a=as.POSIXlt(x[1])
weekdays(a)
a=as.POSIXlt('2014-06-12')
weekdays(a)
day_define=as.POSIXlt(colnames(data_m))
day_define=weekdays(day_define)
day_define
weekends=c("星期六","星期日")
day_define=ifelse(day_define%in%weekends,'weekend','weekday')
day_define
